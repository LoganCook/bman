import json
import logging

import requests

logger = logging.getLogger('record.management')


def get_json(url, params=None, headers=None, verify_ssl=True, timeout=10):
    """Get JSON response from an url

    headers: dict, for custom headers
    verify_ssl: bool or string, switch for verifying ssl when using https, default is True.
                 It can be a CA_BUNDLE file or directory with certificates of trusted CAs.
    timeout: int, connection timeout in seconds
    """
    try:
        logger.debug('Get json data from %s with params = %s', url, params)
        resp = requests.get(url, params=params, headers=headers, verify=verify_ssl, timeout=timeout)
    except requests.exceptions.ConnectionError as error:
        logger.error('Cannot connect to %s, detail: %s', url, error)
        return None
    except requests.exceptions.ReadTimeout:
        logger.error('Timeout when accessing url=%s', url)
        raise

    status_code = resp.status_code

    if status_code == 404:
        logger.info('Accessing %s returned 404: no data or wrong url', url)
        return None  # TODO is this appropriate? Maybe should raise an exception?

    if status_code != 200:
        raise RuntimeError('Accessing %s failed: status code: %d' % (url, status_code))

    return resp.json()


def get_hierarchy(entries, parent_field, pk_key, pk_value='name'):
    """Get values of Account instance in a hierarchical dict

    Instances can be from this database or from CRM

    entries: list of dict
    parent_field: field_name for checking if there is a parent, will be removed from a parent
    pk_key: key for indexing in building process
    pk_value: value to be used for indexing in result

    { pk_value_1: {
                pk_key: blar_parent_1,
                pk_value: pk_value_1,
                children: [{
                                pk_key: blar_pk_key,
                                pk_value: blar_pk_value,
                                parent_id: blar_parent_1,
                                ...
                            }]
                ...
                },
      pk_value_2: {},
        ...
    }
    """
    id_to_name_index = {}
    result = {}
    # Get top first because there is no order which account comes first

    # First get tops:
    for entry in entries:
        if not entry[parent_field]:
            # Assume names at the top level are unique
            result[entry[pk_value]] = entry.copy()
            del result[entry[pk_value]][parent_field]
            result[entry[pk_value]]['children'] = []
            id_to_name_index[entry[pk_key]] = result[entry[pk_value]][pk_value]
    # Second append children to parent
    for entry in entries:
        if parent_field in entry and entry[parent_field]:
            child = entry.copy()
            child['parent_id'] = child.pop(parent_field)
            result[id_to_name_index[child['parent_id']]]['children'].append(child)
    return result


def load_account_names(path):
    """Read a JSON file and retrun a two-level hierarchical structure

    Data is generated by crm6.dynamics.com/api/data/v8.2/accounts?$select=name,_parentaccountid_value
    """
    with open(path, 'r') as jf:
        data = json.load(jf)

    return get_hierarchy(data['value'], '_parentaccountid_value', 'accountid')
